<?xml version="1.0"?>
<!-- This file is part of the book                    -->
<!--                                                  -->
<!-- Abstract Algebra: Theory and Applications        -->
<!--                                                  -->
<!-- Text: Copyright (C) 1997-2024  Thomas W. Judson  -->
<!-- Sage: Copyright (C) 2010-2024  Robert A. Beezer  -->
<!-- See the file COPYING for copying conditions.     -->
<!-- This file is part of the book                    -->
<!--                                                  -->
<!-- See the file COPYING for copying conditions.     -->
<chapter xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="sets">
    <!-- % TWJ, 2010/03/31 -->
    <!-- % Chapters now begin with Chapter 1 -->
  <title>Preliminaries</title>
  <introduction>
    <p>
      A certain amount of mathematical maturity is necessary to find and study applications of abstract algebra.
      A basic knowledge of set theory,
      mathematical induction, equivalence relations, and matrices is a must.
      Even more important is the ability to read and understand mathematical proofs.
      In this chapter we will outline the background needed for a course in abstract algebra.
    </p>
  </introduction>

  <section xml:id="sets-section-note-on-proofs">
    <title>A Short Note on Proofs</title>
    <introduction>
      <p>
        Abstract mathematics is different from other sciences.
        In laboratory sciences such as chemistry and physics,
        scientists perform experiments to discover new principles and verify theories.
        Although mathematics is often motivated by physical experimentation or by computer simulations,
        it is made rigorous through the use of logical arguments.
        In studying abstract mathematics,
        we take what is called an axiomatic approach;
        that is, we take a collection of objects
        <m>\mathcal S</m> and assume some rules about their structure.
        These rules are called <term>axioms</term>.
        Using the axioms for <m>\mathcal S</m>,
        we wish to derive other information about
        <m>\mathcal S</m> by using logical arguments.
        We require that our axioms be consistent;
        that is, they should not contradict one another.
        We also demand that there not be too many axioms.
        If a system of axioms is too restrictive,
        there will be few examples of the mathematical structure.
      </p>

      <p>
        A <term>statement</term> in logic or mathematics is an assertion that is either true or false.
        Consider the following examples:

        <ul>
          <li>
            <p>
              <m>3 + 56 - 13 + 8/2 </m>.
            </p>
          </li>

          <li>
            <p>
              All cats are black.
            </p>
          </li>

          <li>
            <p>
              <m>2 + 3 = 5</m>.
            </p>
          </li>

          <li>
            <p>
              <m>2x = 6</m> exactly when <m>x = 4</m>.
            </p>
          </li>

          <li>
            <p>
              If <m>ax^2 + bx + c = 0</m> and <m>a \neq 0</m>, then
              <me>
                x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}
              </me>.
            </p>
          </li>

          <li>
            <p>
              <m>x^3 - 4x^2 + 5 x - 6</m>.
            </p>
          </li>
        </ul>

        All but the first  and last examples are statements,
        and must be either true or false.
      </p>

      <p>
        A <term>mathematical proof</term>
        is nothing more than a convincing argument about the accuracy of a statement.
        Such an argument should contain enough detail to convince the audience;
        for instance, we can see that the statement
        <q><m>2x = 6</m> exactly when <m>x = 4</m></q>
        is false by evaluating <m>2 \cdot 4</m> and noting that <m>6 \neq 8</m>,
        an argument that would satisfy anyone.
        Of course, audiences may vary widely:
        proofs can be addressed to another student,
        to a professor, or to the reader of a text.
        If more detail than needed is presented in the proof,
        then the explanation will be either long-winded or poorly written.
        If too much detail is omitted,
        then the proof may not be convincing.
        Again it is important to keep the audience in mind.
        High school students require much more detail than do graduate students.
        A good rule of thumb for an argument in an introductory abstract algebra course is that it should be written to convince one's peers,
        whether those peers be other students or other readers of the text.
      </p>

      <p>
        Let us examine different types of statements.
        A statement could be as simple as
        <q><m>10/5 = 2</m>;</q> however,
        mathematicians are usually interested in more complex statements such as <q>If <m>p</m>,
        then <m>q</m>,</q> where <m>p</m> and <m>q</m> are both statements.
        If certain statements are known or assumed to be true,
        we wish to know what we can say about other statements.
        Here <m>p</m> is called the <term>hypothesis</term>
        and <m>q</m> is known as the <term>conclusion</term>.
        Consider the following statement: If
        <m>ax^2 + bx + c = 0</m> and <m>a \neq 0</m>, then
        <me>
          x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}
        </me>.
        The hypothesis is <m>ax^2 + bx + c = 0</m> and <m>a \neq 0</m>;
        the conclusion is
        <me>
          x = \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}
        </me>.
        Notice that the  statement says nothing about whether or not the hypothesis is true.
        However, if this entire statement is true and we can show that
        <m>ax^2 + bx + c = 0</m> with <m>a \neq 0</m> is true,
        then the conclusion <em>must</em> be true.
        A proof of this statement might simply be a series of equations:
        <md>
          <mrow>ax^2 + bx + c &amp; =  0</mrow>
          <mrow>x^2 + \frac{b}{a}x &amp; =  - \frac{c}{a}</mrow>
          <mrow>x^2 + \frac{b}{a}x + \left( \frac{b}{2a} \right)^2 &amp; =  \left( \frac{b}{2a} \right)^2 - \frac{c}{a}</mrow>
          <mrow>\left(x + \frac{b}{2a} \right)^2 &amp; =  \frac{b^2 - 4ac}{4a^2}</mrow>
          <mrow>x + \frac{b}{2a}  &amp; =  \frac{ \pm \sqrt{ b^2 -4ac}}{2a}</mrow>
          <mrow>x &amp; =  \frac{-b \pm \sqrt{b^2 - 4ac}}{2a}</mrow>
        </md>.
      </p>

      <p>
        If we can prove a statement true,
        then that statement is called a <term>proposition</term>.
        A proposition of major importance is called a <term>theorem</term>.
        Sometimes instead of proving a theorem or proposition all at once,
        we break the proof down into modules;
        that is, we prove several supporting propositions,
        which are called <term>lemmas</term>,
        and use the results of these propositions to prove the main result.
        If we can prove a proposition or a theorem,
        we will often, with very little effort,
        be able to derive other related propositions called <term>corollaries</term>.
      </p>
    </introduction>

    <subsection xml:id="sets-subsection-cautions">
      <title>Some Cautions and Suggestions</title>
      <p>
        There are several different strategies for proving propositions.
        In addition to using different methods of proof,
        students often make some common mistakes when they are first learning how to prove theorems.
        To aid students who are studying abstract mathematics for the first time,
        we list here some of the difficulties that they may encounter and some of the strategies of proof available to them.
        It is a good idea to keep referring back to this list as a reminder.
        (Other techniques of proof will become apparent throughout this chapter and the remainder of the text.)

        <ul>
          <li>
            <p>
              A theorem cannot be proved by example;
              however, the standard way to show that a statement is not a theorem is to provide a counterexample.
            </p>
          </li>

          <li>
            <p>
              Quantifiers are important.
              Words and phrases such as <em>only</em>, <em>for all</em>,
              <em>for every</em>, and <em>for some</em>
              possess different meanings.
            </p>
          </li>

          <li>
            <p>
              Never assume any hypothesis that is not explicitly stated in the theorem.
              <em>You cannot take things for granted.</em>
            </p>
          </li>

          <li>
            <p>
              Suppose you wish to show that an object
              <em>exists</em> and is <em>unique</em>.
              First show that there actually is such an object.
              To show that it is unique, assume that there are two such objects,
              say <m>r</m> and <m>s</m>, and then show that <m>r = s</m>.
            </p>
          </li>

          <li>
            <p>
              Sometimes it is easier to prove the contrapositive of a statement.
              Proving the statement <q>If <m>p</m>,
              then <m>q</m></q> is exactly the same as proving the statement
              <q>If not <m>q</m>, then not <m>p</m>.</q>
            </p>
          </li>

          <li>
            <p>
              Although it is usually better to find a direct proof of a theorem,
              this task can sometimes be difficult.
              It may be easier to assume that the theorem that you are trying to prove is false,
              and to hope that in the course of your argument you are forced to make some statement that cannot possibly be true.
            </p>
          </li>
        </ul>

        Remember that one of the main objectives of higher mathematics is proving theorems.
        Theorems are tools that make new and productive applications of mathematics possible.
        We use examples to give insight  into existing theorems and to foster intuitions as to what new theorems might be true.
        Applications, examples,
        and proofs are tightly interconnected<mdash/>much more so than they may seem at first appearance.
      </p>
    </subsection>

  </section>

  <section xml:id="ssets-ection-sets-and-equivalence-relations">
    <title>Sets and Equivalence Relations</title>
    <subsection xml:id="sets-subsection-set-theory">
      <title>Set Theory</title>
      <p>
        A <term>set</term> is a well-defined collection of objects;
        that is, it is defined in such a manner that we can determine for any given object <m>x</m> whether or not <m>x</m> belongs to the set.
        The objects that belong to a set are called its
        <term>elements</term> or <term>members</term>.
        We will denote sets by capital letters,
        such as <m>A</m> or <m>X</m>;
        if <m>a</m> is an element of the set <m>A</m>, we write <m>a \in A</m>.

        <notation>
          <usage><m>a \in A</m></usage>
          <description><m>a</m> is in the set <m>A</m></description>
        </notation>

      </p>

      <!--Todo Make notation table-->

      <p>
        A set is usually specified either by listing all of its elements inside a pair of braces or by stating the property that determines whether or not an object <m>x</m> belongs to the set.
        We might write
        <me>
          X = \{ x_1, x_2, \ldots, x_n \}
        </me>
        for a set containing elements <m>x_1, x_2, \ldots, x_n</m> or
        <me>
          X = \{ x :x \text{ satisfies }{\mathcal P}\}
        </me>
        if each <m>x</m> in <m>X</m> satisfies a certain property <m>{\mathcal P}</m>.
        For example, if <m>E</m> is the set of even positive integers,
        we can describe <m>E</m> by writing either
        <me>
          E = \{2, 4, 6, \ldots \} \quad \text{or} \quad E = \{ x : x \text{ is an even integer and } x \gt 0 \}
        </me>.
        We write <m>2 \in E</m> when we want to say that 2 is in the set <m>E</m>,
        and <m>-3 \notin E</m> to say that <m>-3</m> is not in the set <m>E</m>.
      </p>

      <p>
        Some of the more important sets that we will consider are the following:
        <md>
          <mrow>{\mathbb N} = \{n: n \text{ is a natural number}\}  = \{1, 2, 3, \ldots \};</mrow>
          <mrow>{\mathbb Z} = \{n : n \text{ is an integer} \} = \{\ldots, -1, 0, 1,  2, \ldots \};</mrow>
          <mrow>{\mathbb Q} = \{r : r \text{ is a rational number}\} = \{p/q : p, q \in {\mathbb Z} \text{ where } q \neq 0\};</mrow>
          <mrow>{\mathbb R} = \{ x : x \text{ is a real number} \};</mrow>
          <mrow>{\mathbb C} = \{z : z \text{ is a complex number}\}</mrow>
        </md>.

        <notation>
          <usage><m>{\mathbb N}</m></usage>
          <description>the natural numbers</description>
        </notation>

        <notation>
          <usage><m>{\mathbb Z}</m></usage>
          <description>the integers</description>
        </notation>

        <notation>
          <usage><m>{\mathbb Q}</m></usage>
          <description>the rational numbers</description>
        </notation>

        <notation>
          <usage><m>{\mathbb R}</m></usage>
          <description>the real numbers</description>
        </notation>

        <notation>
          <usage><m>{\mathbb C}</m></usage>
          <description>the complex numbers</description>
        </notation>

      </p>

      <p>
        We can find various relations between sets as well as perform operations on sets.
        A set <m>A</m> is a <term>subset</term> of <m>B</m>,
        written <m>A \subset B</m> or <m>B \supset A</m>,
        if every element of <m>A</m> is also an element of <m>B</m>.

        <notation>
          <usage><m>A \subset B</m></usage>
          <description><m>A</m> is a subset of <m>B</m></description>
        </notation>

        For example,
        <me>
          \{4,5,8\} \subset \{2, 3, 4, 5, 6, 7, 8, 9 \}
        </me>
        and
        <me>
          {\mathbb N} \subset {\mathbb Z} \subset {\mathbb Q} \subset {\mathbb R} \subset {\mathbb C}
        </me>.
        Trivially, every set is a subset of itself.
        A set <m>B</m> is a <term>proper subset</term>
        of a set <m>A</m> if <m>B \subset A</m> but <m>B \neq A</m>.
        If <m>A</m> is not a subset of <m>B</m>,
        we write <m>A \notsubset B</m>;
        for example, <m>\{4, 7, 9\} \notsubset \{2, 4, 5,  8, 9 \}</m>.
        Two sets are <term>equal</term>, written <m>A = B</m>,
        if we can show that <m>A \subset B</m> and <m>B \subset A</m>.
      </p>

      <p>
        It is convenient to have a set with no elements in it.
        This set is called the <term>empty set</term>
        and is denoted by <m>\emptyset</m>.
        Note that the empty set is a subset of every set.

        <notation>
          <usage><m>\emptyset</m></usage>
          <description>the empty set</description>
        </notation>

      </p>

      <p>
        To construct new sets out of old sets,
        we can perform certain operations:
        the <term>union</term> <m>A \cup B</m> of two sets <m>A</m> and <m>B</m> is defined as
        <me>
          A \cup B = \{x : x \in A \text{ or } x \in B \};
        </me>
        the <term>intersection</term> of <m>A</m> and <m>B</m>  is defined by
        <me>
          A \cap B = \{x :  x \in A \text{ and } x \in B \}
        </me>.

        <notation>
          <usage><m>A \cup B</m></usage>
          <description>the union of sets <m>A</m> and <m>B</m></description>
        </notation>

        <notation>
          <usage><m>A \cap B</m></usage>
          <description>the intersection of sets <m>A</m> and <m>B</m></description>
        </notation>

        If <m>A = \{1, 3, 5\}</m> and <m>B = \{ 1, 2, 3, 9 \}</m>, then
        <me>
          A \cup B = \{1, 2, 3, 5, 9 \} \quad \text{and} \quad A \cap B = \{ 1, 3 \}
        </me>.
        We can consider the union and the intersection of more than two sets.
        In this case we write
        <me>
          \bigcup_{i = 1}^{n} A_{i} = A_{1} \cup \ldots \cup A_n
        </me>
        and
        <me>
          \bigcap_{i = 1}^{n} A_{i} = A_{1} \cap \ldots \cap A_n
        </me>
        for the union and intersection, respectively,
        of the sets <m>A_1, \ldots, A_n</m>.
      </p>
            <!-- Added comma after \ldots - TWJ 12/16/2010 -->
      <p>
        When two sets have no elements in common,
        they are said to be <term>disjoint</term>;
        for example,
        if <m>E</m> is the set of even integers and <m>O</m> is the set of odd integers,
        then <m>E</m> and <m>O</m> are disjoint.
        Two sets <m>A</m> and <m>B</m> are disjoint exactly when <m>A \cap B = \emptyset</m>.
      </p>

      <p>
        Sometimes we will work within one fixed set <m>U</m>,
        called the <term>universal set</term>.
        For any set <m>A \subset U</m>,
        we define the <term>complement</term> of <m>A</m>,
        denoted by <m>A'</m>, to be the set

        <notation>
          <usage><m>A'</m></usage>
          <description>complement of the set <m>A</m></description>
        </notation>

        <me>
          A' = \{ x : x \in U \text{ and } x \notin A \}
        </me>.
      </p>

      <p>
        We define the <term>difference</term>
        of two sets <m>A</m> and <m>B</m> to be

        <notation>
          <usage><m>A \setminus B</m></usage>
          <description>difference between sets <m>A</m> and <m>B</m></description>
        </notation>

        <me>
          A \setminus B = A \cap B'  = \{ x : x \in A \text{ and } x \notin B \}
        </me>.
      </p>

      <example xml:id="sets-example-operations">
        <p>
          Let <m>{\mathbb R}</m> be the universal set and suppose that
          <me>
            A = \{ x \in {\mathbb R} : 0 \lt x \leq 3 \} \quad \text{and} \quad B = \{ x \in {\mathbb R} : 2 \leq x \lt 4 \}
          </me>.
          Then
          <md>
            <mrow>A \cap B &amp; =  \{ x \in {\mathbb R} : 2 \leq x \leq 3 \}</mrow>
            <mrow>A \cup B &amp; =  \{ x \in {\mathbb R} : 0 \lt x \lt 4 \}</mrow>
            <mrow>A \setminus B &amp; =  \{ x \in {\mathbb R} : 0 \lt x \lt 2  \}</mrow>
            <mrow>A' &amp; =  \{ x \in {\mathbb R} : x \leq 0 \text{ or } x \gt 3 \}</mrow>
          </md>.
        </p>
      </example>

      <proposition>
        <statement>
          <p>
            Let <m>A</m>, <m>B</m>, and <m>C</m> be sets.
            Then

            <ol>
              <li>
                <p>
                  <m>A \cup A = A</m>, <m>A \cap A = A</m>,
                  and <m>A \setminus A = \emptyset</m>;
                </p>
              </li>

              <li>
                <p>
                  <m>A \cup \emptyset = A</m> and <m>A \cap \emptyset = \emptyset</m>;
                </p>
              </li>

              <li>
                <p>
                  <m>A \cup (B \cup C) = (A \cup B) \cup C</m> and <m>A \cap (B \cap C) = (A \cap B) \cap C</m>;
                </p>
              </li>

              <li>
                <p>
                  <m>A \cup B = B \cup A</m> and <m>A \cap B = B \cap A</m>;
                </p>
              </li>

              <li>
                <p>
                  <m>A \cup (B \cap C) = (A \cup B) \cap (A \cup C)</m>;
                </p>
              </li>

              <li>
                <p>
                  <m>A \cap (B \cup C) = (A \cap B) \cup (A \cap C)</m>.
                </p>
              </li>
            </ol>
          </p>
        </statement>

        <proof>
          <p>
            We will prove (1) and (3) and leave the remaining results to be proven in the exercises.
          </p>

          <p>
            (1) Observe that
            <md>
              <mrow>A \cup A &amp; =  \{ x :  x \in A \text{ or } x \in A \}</mrow>
              <mrow>&amp; =  \{ x : x \in A \}</mrow>
              <mrow>&amp; =  A</mrow>
            </md>
            and
            <md>
              <mrow>A \cap A &amp; =  \{ x : x \in A \text{ and } x \in A \}</mrow>
              <mrow>&amp; =  \{ x : x \in A  \}</mrow>
              <mrow>&amp; =  A</mrow>
            </md>.
            Also, <m>A \setminus A = A \cap A' = \emptyset</m>.
          </p>

          <p>
            (3) For sets <m>A</m>, <m>B</m>, and <m>C</m>,
            <md>
              <mrow>A \cup (B \cup C) &amp; = A \cup \{ x : x \in B \text{ or } x \in C \}</mrow>
              <mrow>&amp; = \{ x : x \in A \text{ or } x \in B, \text{ or } x \in C \}</mrow>
              <mrow>&amp; = \{ x : x \in A \text{ or } x \in B \} \cup C</mrow>
              <mrow>&amp; = (A \cup B) \cup C</mrow>
            </md>.
            A similar argument proves that  <m>A \cap (B \cap C) = (A \cap B) \cap C</m>.
          </p>
        </proof>
      </proposition>

      <theorem>
        <title>De Morgan's Laws</title>
        <idx>
        <h>De Morgan's laws</h>
        <h>for sets</h>
        </idx>
        <statement>
          <p>
            Let <m>A</m> and <m>B</m> be sets.
            Then

            <ol>
              <li>
                <p>
                  <m>(A \cup B)' = A' \cap B'</m>;
                </p>
              </li>

              <li>
                <p>
                  <m>(A \cap B)' = A' \cup B'</m>.
                </p>
              </li>
            </ol>
          </p>
        </statement>

        <proof>
          <p>
            (1) If <m>A \cup B = \emptyset</m>,
            then the theorem follows immediately since both <m>A</m> and <m>B</m> are the empty set.
            Otherwise, we must show that
            <m>(A \cup B)' \subset A' \cap B'</m> and <m>(A \cup B)' \supset A' \cap B'</m>.
            Let <m>x \in (A \cup B)'</m>.
            Then <m>x \notin A \cup B</m>.
            So <m>x</m> is neither in <m>A</m> nor in <m>B</m>,
            by the definition of the union of sets.
            By the definition of the complement,
            <m>x \in A'</m> and <m>x \in B'</m>.
            Therefore, <m>x \in A' \cap B'</m> and we have <m>(A \cup B)' \subset A' \cap B'</m>.
          </p>

          <p>
            To show the reverse inclusion,
            suppose that <m>x \in A' \cap B'</m>.
            Then <m>x \in A'</m> and <m>x \in B'</m>,
            and so <m>x \notin A</m> and <m>x \notin B</m>.
            Thus <m>x \notin A \cup B</m> and so <m>x \in (A \cup B)'</m>.
            Hence, <m>(A \cup B)' \supset A' \cap B'</m> and so <m>(A \cup B)' = A' \cap B'</m>.
          </p>

          <p>
            The proof of (2) is left as an exercise.
          </p>
        </proof>
      </theorem>

      <example xml:id="sets-example-other-relations">
        <p>
          Other relations between sets often hold true.
          For example,
          <me>
            ( A \setminus B) \cap (B \setminus A) = \emptyset
          </me>.
          To see that this is true, observe that
          <md>
            <mrow>( A \setminus B) \cap (B \setminus A) &amp; = ( A \cap B') \cap (B \cap A')</mrow>
            <mrow>&amp; = A \cap A' \cap B \cap B'</mrow>
            <mrow>&amp; = \emptyset</mrow>
          </md>.
        </p>
      </example>
    </subsection>

    <subsection xml:id="sets-subsection-cartesian-products">
      <title>Cartesian Products and Mappings</title>
      <p>
        Given sets <m>A</m> and <m>B</m>,
        we can define a new set <m>A \times B</m>,
        called the <term>Cartesian product</term>
        of <m>A</m> and <m>B</m>,
        as a set of ordered pairs.
        That is,

        <notation>
          <usage><m>A \times B</m></usage>
          <description>Cartesian product of sets <m>A</m> and <m>B</m></description>
        </notation>

        <me>
          A \times B = \{ (a,b) : a \in A \text{ and } b \in B \}
        </me>.
      </p>

      <example xml:id="sets-example-cartesian-products">
        <p>
          If <m>A = \{ x, y \}</m>, <m>B = \{ 1, 2, 3 \}</m>,
          and <m>C = \emptyset</m>, then <m>A \times B</m> is the set
          <me>
            \{ (x, 1), (x, 2), (x, 3), (y, 1), (y, 2), (y, 3) \}
          </me>
          and
          <me>
            A \times C = \emptyset
          </me>.
        </p>
      </example>

      <p>
        We define the <term>Cartesian product of <m>n</m> sets</term> to be
        <me>
          A_1 \times \cdots \times A_n = \{ (a_1, \ldots, a_n): a_i \in A_i \text{ for } i = 1, \ldots, n \}
        </me>.
        If <m>A = A_1 = A_2 = \cdots = A_n</m>,
        we often write <m>A^n</m> for <m>A \times \cdots \times A</m>
        (where <m>A</m> would be written <m>n</m> times).

        <notation>
          <usage><m>A^n</m></usage>
          <description><m>A \times \cdots \times A</m> (<m>n</m> times)</description>
        </notation>

        For example,
        the set <m>{\mathbb R}^3</m> consists of all of 3-tuples of real numbers.
      </p>

      <p>
        Subsets of <m>A \times B</m> are called <term>relations</term>.
        We will define a <term>mapping</term><idx><h>Mapping</h><see>Function</see></idx> or
        <term>function</term><idx><h>Function</h><h>definition of</h></idx>
        <m>f \subset A \times B</m> from a set <m>A</m> to a set <m>B</m> to be the special type of relation where each element <m>a \in A</m> has a unique element <m>b \in B</m> such that <m>(a, b) \in f</m>.
        Another way of saying this is that for every element in <m>A</m>,
        <m>f</m> assigns a unique element in <m>B</m>.
        We usually write <m>f:A \rightarrow B</m> or <m>A \stackrel{f}{\rightarrow} B</m>.
        Instead of writing down ordered pairs  <m>(a,b) \in A \times B</m>,
        we write <m>f(a) = b</m> or <m>f : a \mapsto b</m>.
        The set  <m>A</m> is called the
        <term>domain</term><idx><h>Function</h><h>domain of</h></idx> of <m>f</m> and
        <me>
          f(A) = \{ f(a) : a \in A \} \subset B
        </me>
        is called the <term>range</term><idx><h>Function</h><h>range of</h></idx>
        or <term>image</term> of <m>f</m>.
        We can think of the elements in the function's domain as input values and the elements in the function's range as output values.
      </p>



      <example xml:id="sets-example-mappings">
        <p>
          Suppose <m>A = \{1, 2, 3 \}</m> and <m>B = \{a, b, c \}</m>.
          In <xref ref="sets-figure-mappings"/> we define relations <m>f</m> and <m>g</m> from <m>A</m> to <m>B</m>.
          The relation <m>f</m> is a mapping,
          but <m>g</m> is not because <m>1 \in A</m> is not assigned to a unique element in <m>B</m>;
          that is, <m>g(1) = a</m> and <m>g(1) = b</m>.
        </p>

        <figure xml:id="sets-figure-mappings">
          <caption>Mappings and relations</caption>
            <!-- Changed the figure to a tikz diagram - TWJ 5/4/2010 -->
          <image width="60%" xml:id="sets-mappings">
            <description>Two sets of ovals, A and B, relating 1, 2, 3 to a, b, c.  The first mapping, f, sends 1 to b and 2 and 3 to c.  The second relation, g, sends 1 to a and b, 2 to c, and 3 to a</description>

            <latex-image>
                <xi:include href="tikz/sets-mappings.tex" parse="text"/>
            </latex-image>
          </image>
            <!-- Changed the caption to avoid confusion -->
            <!--  Suggested by B. Torrence.  TWJ 10/1/2014 -->
        </figure>
      </example>

      <p>
        Given a function <m>f : A \rightarrow B</m>,
        it is often possible to write a list describing what the function does to each specific element in the domain.
        However, not all functions can be described in this manner.
        For example,
        the function <m>f: {\mathbb R} \rightarrow {\mathbb R}</m> that sends each real number to its cube is a mapping that must be described by writing
        <m>f(x) = x^3</m> or <m>f:x \mapsto x^3</m>.
      </p>

      <p>
        Consider the relation <m>f : {\mathbb Q} \rightarrow {\mathbb Z}</m> given by <m>f(p/q) = p</m>.
        We know that <m>1/2 = 2/4</m>,
        but is <m>f(1/2) = 1</m> or <m>2</m>?
        This relation cannot be a mapping because it is not well-defined.
        A relation is <term>well-defined</term><idx><h>Well-defined map</h></idx>
        if each element in the domain is assigned to a
        <em>unique</em> element in the range.
      </p>

      <p>
        If <m>f:A \rightarrow B</m> is a map and the image of <m>f</m> is <m>B</m>,
        i.e., <m>f(A) = B</m>, then <m>f</m> is said to be <term>onto</term><idx><h>Function</h><h>onto</h></idx>
        or <idx><h>Function</h><h>surjective</h></idx><term>surjective</term>.
        In other words,
        if there exists an <m>a \in A</m> for each <m>b \in B</m> such that
        <m>f(a) = b</m>, then <m>f</m> is onto.
        A map is <term>one-to-one</term><idx><h>Function</h><h>one-to-one</h></idx> or
        <term>injective</term><idx><h>Function</h><h>injective</h></idx> if
        <m>a_1 \neq a_2</m> implies <m>f(a_1) \neq f(a_2)</m>.
        Equivalently, a function is one-to-one if
        <m>f(a_1) = f(a_2)</m> implies <m>a_1 = a_2</m>.
        A map that is both one-to-one and onto is called <idx><h>Function</h><h>bijective</h></idx><term>bijective</term>.
      </p>
            <!-- Added explanation for onto map - TWJ 1/25/2011 -->
      <example xml:id="sets-example-one-to-one-onto">
        <p>
          Let <m>f:{\mathbb Z} \rightarrow {\mathbb Q}</m> be defined by <m>f(n) = n/1</m>.
          Then <m>f</m> is one-to-one but not onto.
          Define <m>g : {\mathbb Q} \rightarrow {\mathbb Z}</m> by
          <m>g(p/q) = p</m> where <m>p/q</m> is a rational number expressed in its lowest terms with a positive denominator.
          The function <m>g</m> is onto but not one-to-one.
        </p>
      </example>

      <p>
        Given two functions,
        we can construct a new function by using the range of the first function as the domain of the second function.
        Let <m>f : A \rightarrow B</m> and <m>g : B \rightarrow C</m> be mappings.
        Define a new map,
        the <term>composition</term><idx><h>Function</h><h>composition of</h></idx> of <m>f</m> and <m>g</m> from <m>A</m> to <m>C</m>,
        by <m>(g \circ f)(x) = g(f(x))</m>.
      </p>

      <figure xml:id="sets-figure-composition">
        <caption>Composition of maps</caption>
            <!-- Changed the figure to a tikz diagram - TWJ 5/4/2010 -->
        <image width="90%" xml:id="sets-composition">
          <description>Two sets of ovals, A and B, relating 1, 2, 3 to a, b, c and a, b, c to X, Y, Z.  The first mapping, f, sends 1 to b, 2  2 to c, and 3 to a.  The second relation, g, sends a and b to Z and c to X.  The bottom map, g circle f, sends 1 and 3 to Z and 2 to X. </description>
            <latex-image>
                <xi:include href="tikz/sets-composition.tex" parse="text"/>
            </latex-image>
        </image>

      </figure>

      <example xml:id="sets-example-composition">
        <p>
          Consider the functions <m>f: A \rightarrow B</m> and
          <m>g: B \rightarrow C</m> that are defined in <xref ref="sets-figure-composition"/>
          (top).
          The composition of these functions,
          <m>g \circ f: A \rightarrow C</m>,
          is defined in <xref ref="sets-figure-composition"/>
          (bottom).
        </p>
      </example>
            <!-- Changed figure references.  Suggested by P. Diethelm.  TWJ 22/4/2013 -->
      <example xml:id="sets-example-composition-noncommute">
        <p>
          Let <m>f(x) = x^2</m> and <m>g(x) = 2x + 5</m>.
          Then
          <me>
            (f \circ g)(x) = f(g(x)) = (2x + 5)^2 = 4x^2 + 20x + 25
          </me>
          and
          <me>
            (g \circ f)(x) = g(f(x)) = 2x^2 + 5
          </me>.
          In general, order makes a difference;
          that is, in most cases <m>f \circ g \neq g \circ f</m>.
        </p>
      </example>

      <example xml:id="sets-example-composition-commute">
        <p>
          Sometimes it is the case that <m>f \circ g= g \circ f</m>.
          Let <m>f(x) = x^3</m> and <m>g(x) = \sqrt[3]{x}</m>.
          Then
          <me>
            (f \circ g )(x) = f(g(x)) = f( \sqrt[3]{x}\, ) = (\sqrt[3]{x}\, )^3 = x
          </me>
          and
          <me>
            (g \circ f )(x) = g(f(x)) = g( x^3) = \sqrt[3]{ x^3} = x
          </me>.
        </p>
      </example>

      <example xml:id="sets-example-linear-map">
        <p>
          Given a <m>2 \times 2</m> matrix
          <me>
            A =
            \begin{pmatrix}
            a &amp; b \\
            c &amp; d
            \end{pmatrix}
          </me>,
          we can define a map <m>T_A : {\mathbb R}^2 \rightarrow {\mathbb R}^2</m> by
          <me>
            T_A (x,y) = (ax + by, cx +dy)
          </me>
          for <m>(x,y)</m> in <m>{\mathbb R}^2</m>.
          This is actually matrix multiplication; that is,
          <me>
            \begin{pmatrix}
            a &amp; b \\
            c &amp; d
            \end{pmatrix}
            \begin{pmatrix}
            x \\ y
            \end{pmatrix}
            =
            \begin{pmatrix}
            ax + by \\
            cx +dy
            \end{pmatrix}
          </me>.
          Maps from <m>{\mathbb R}^n</m> to
          <m>{\mathbb R}^m</m> given by matrices are called <term>linear maps</term>
          or <idx><h>Linear transformation</h><h>definition of</h></idx><term>linear transformations</term>.      
        </p>
      </example>

      <example xml:id="sets-example-permutation">
        <p>
          Suppose that <m>S = \{ 1,2,3  \}</m>.
          Define a map <m>\pi :S\rightarrow S</m> by
          <me>
            \pi( 1 )  = 2, \qquad \pi( 2 )  = 1, \qquad \pi( 3 )  = 3
          </me>.
          This is a bijective map.
          An alternative way to  write <m>\pi</m> is
          <me>
            \begin{pmatrix}
            1 &amp; 2 &amp; 3 \\
            \pi(1) &amp; \pi(2) &amp; \pi(3)
            \end{pmatrix}
            =
            \begin{pmatrix}
            1 &amp; 2 &amp; 3 \\
            2 &amp; 1 &amp; 3
            \end{pmatrix}
          </me>.
          For any set <m>S</m>,
          a one-to-one and onto mapping <m>\pi : S \rightarrow S</m> is called a
          <term>permutation</term><idx><h>Permutation</h><h>definition of</h></idx> of <m>S</m>.
        </p>
      </example>

      <theorem>
        <statement>
          <p>
            Let <m>f : A \rightarrow B</m>,
            <m>g : B \rightarrow C</m>, and <m>h : C \rightarrow D</m>.
            Then

            <ol>
              <li>
                <p>
                  The composition of mappings is associative;
                  that is, <m>(h \circ g) \circ f = h \circ (g \circ f)</m>;
                </p>
              </li>

              <li>
                <p>
                  If <m>f</m> and <m>g</m> are both one-to-one,
                  then the mapping <m>g \circ f</m> is one-to-one;
                </p>
              </li>

              <li>
                <p>
                  If <m>f</m> and <m>g</m> are both onto,
                  then the mapping <m>g \circ f</m> is onto;
                </p>
              </li>

              <li>
                <p>
                  If <m>f</m> and <m>g</m> are bijective,
                  then so is <m>g \circ f</m>.
                </p>
              </li>
            </ol>
          </p>
        </statement>

        <proof>
          <p>
            We will prove (1) and (3).
            Part (2) is left as an exercise.
            Part (4) follows directly from (2) and (3).
          </p>

          <p>
            (1) We must show that
            <me>
              h \circ (g \circ f) = (h \circ g) \circ f
            </me>.
            For <m>a \in A</m> we have
            <md>
              <mrow>(h \circ (g \circ f))(a) &amp; = h((g \circ f)(a))</mrow>
              <mrow>&amp; = h(g(f(a)))</mrow>
              <mrow>&amp; = (h \circ g)(f(a))</mrow>
              <mrow>&amp; = ((h \circ g) \circ f)(a)</mrow>
            </md>.
          </p>

          <p>
            (3) Assume that <m>f</m> and <m>g</m> are both onto functions.
            Given <m>c \in C</m>,
            we must show that there exists an <m>a \in A</m> such that <m>(g \circ f)(a) = g(f(a)) = c</m>.
            However, since <m>g</m> is onto,
            there is an element <m>b \in B</m> such that <m>g(b) = c</m>.
            Similarly, there is an <m>a \in A</m> such that <m>f(a) = b</m>.
            Accordingly,
            <me>
              (g \circ f)(a) = g(f(a)) = g(b) = c
            </me>.
          </p>
        </proof>
      </theorem>

      <p>
        If <m>S</m> is any set, we will use <m>id_S</m> or <m>id</m> to denote the
        <term>identity mapping</term><idx><h>Function</h><h>identity</h></idx>
        from <m>S</m> to itself.
        Define this map by <m>id(s) = s</m> for all <m>s \in S</m>.
        A map <m>g: B \rightarrow A</m> is an
        <term>inverse mapping</term>
        of <m>f: A \rightarrow B</m> if
        <m>g \circ f = id_A</m> and <m>f \circ g = id_B</m>;
        in other words, the inverse function of a function simply
        <q>undoes</q> the function.
        A map is said to be <term>invertible</term><idx><h>Function</h><h>invertible</h></idx> if it has an inverse.
        We usually write <m>f^{-1}</m> for the inverse of <m>f</m>.

        <notation>
          <usage><m>id</m></usage>
          <description>identity mapping</description>
        </notation>

        <notation>
          <usage><m>f^{-1}</m></usage>
          <description>inverse of the function <m>f</m></description>
        </notation>

      </p>

      <example xml:id="sets-example-inverse-function">
        <p>
          The function <m>f(x) = x^3</m> has inverse
          <m>f^{-1}(x) = \sqrt[3]{x}</m> by <xref ref="sets-example-composition-commute"/>.
        </p>
      </example>

      <example xml:id="sets-example-exponential">
        <p>
          The natural logarithm and the exponential functions,
          <m>f(x) = \ln x</m> and <m>f^{-1}(x) = e^x</m>,
          are inverses of each other provided that we are careful about choosing domains.
          Observe that
          <me>
            f(f^{-1}(x)) = f(e^x) = \ln e^x = x
          </me>
          and
          <me>
            f^{-1}(f(x)) = f^{-1}(\ln x) = e^{\ln x} = x
          </me>
          whenever composition makes sense.
        </p>
      </example>

      <example xml:id="sets-example-inverse-matrix">
        <p>
          Suppose that
          <me>
            A =
            \begin{pmatrix}
            3 &amp; 1 \\
            5 &amp; 2
            \end{pmatrix}
          </me>.
          Then <m>A</m> defines a map from
          <m>{\mathbb R}^2</m> to <m>{\mathbb R}^2</m> by
          <me>
            T_A (x,y) = (3x +  y, 5x + 2y)
          </me>.
          We can find an inverse map of <m>T_A</m> by simply inverting the matrix <m>A</m>;
          that is, <m>T_A^{-1} = T_{A^{-1}}</m>.
          In this example,
          <me>
            A^{-1} =
            \begin{pmatrix}
            2  &amp; -1 \\
            -5 &amp;  3
            \end{pmatrix};
          </me>
          hence, the inverse map is given by
          <me>
            T_A^{-1} (x,y) = (2x -  y, -5x + 3y)
          </me>.
          It is easy to check that
          <me>
            T^{-1}_A \circ T_A (x,y) = T_A \circ T_A^{-1} (x,y) = (x,y)
          </me>.
          Not every map has an inverse.
          If we consider the map
          <me>
            T_B (x,y) = (3x , 0 )
          </me>
          given by the matrix
          <me>
            B =
            \begin{pmatrix}
            3 &amp; 0 \\
            0 &amp; 0
            \end{pmatrix}
          </me>,
          then an inverse map would have to be of the form
          <me>
            T_B^{-1} (x,y) = (ax + by, cx +dy)
          </me>
          and
          <me>
            (x,y) = T_B \circ T_B^{-1} (x,y) = (3ax + 3by, 0)
          </me>
          for all <m>x</m> and <m>y</m>.
          Clearly this is  impossible because <m>y</m> might not be <m>0</m>.
        </p>
      </example>

      <example xml:id="sets-example-inverse-permutation">
        <p>
          Given the permutation
          <me>
            \pi =
            \begin{pmatrix}
            1 &amp; 2 &amp; 3 \\
            2 &amp; 3 &amp; 1
            \end{pmatrix}
          </me>
          on <m>S = \{ 1,2,3 \}</m>, it is easy to see that the permutation defined by
          <me>
            \pi^{-1} =
            \begin{pmatrix}
            1 &amp; 2 &amp; 3 \\
            3 &amp; 1 &amp; 2
            \end{pmatrix}
          </me>
          is the inverse of <m>\pi</m>.
          In fact, any bijective mapping possesses an inverse,
          as we will see in the next theorem.
        </p>
      </example>

      <theorem>
        <statement>
          <p>
            A mapping is invertible if and only if it is both one-to-one and onto.
          </p>
        </statement>

        <proof>
          <p>
            Suppose first that <m>f:A \rightarrow B</m> is invertible with inverse <m>g: B \rightarrow A</m>.
            Then <m>g \circ f = id_A</m> is the identity map;
            that is, <m>g(f(a)) = a</m>.
            If <m>a_1, a_2 \in A</m> with <m>f(a_1) = f(a_2)</m>,
            then <m>a_1 = g(f(a_1)) = g(f(a_2)) = a_2</m>.
            Consequently, <m>f</m> is one-to-one.
            Now suppose that <m>b \in B</m>.
            To show that <m>f</m> is onto,
            it is necessary to find an <m>a \in A</m> such that <m>f(a) = b</m>,
            but <m>f(g(b)) = b</m> with <m>g(b) \in A</m>.
            Let <m>a = g(b)</m>.
          </p>

          <p>
            Conversely, let <m>f</m> be bijective and let <m>b \in B</m>.
            Since <m>f</m> is onto,
            there exists an <m>a \in A</m> such that <m>f(a) = b</m>.
            Because <m>f</m> is one-to-one, <m>a</m> must be unique.
            Define <m>g</m> by letting <m>g(b) = a</m>.
            We have now constructed the inverse of <m>f</m>.
          </p>
        </proof>
      </theorem>
    </subsection>

    <subsection xml:id="sets-subsection-equivalence-relations">
      <title>Equivalence Relations and Partitions</title>
      <p>
        A fundamental notion in mathematics is that of equality.
        We can generalize equality with equivalence relations and equivalence classes.
        An <term>equivalence relation</term><idx><h>Equivalence relation</h></idx>
        on a set <m>X</m> is a relation <m>R \subset X \times X</m> such that

        <ul>
          <li>
            <p>
              <m>(x, x) \in R</m> for all <m>x \in X</m> (<term>reflexive property</term>);
            </p>
          </li>

          <li>
            <p>
              <m>(x, y) \in R</m> implies
              <m>(y, x) \in R</m> (<term>symmetric property</term>);
            </p>
          </li>

          <li>
            <p>
              <m>(x, y)</m> and <m>(y, z) \in R</m> imply <m>(x, z) \in R</m>
              (<term>transitive property</term>).
            </p>
          </li>
        </ul>

        Given an equivalence relation <m>R</m> on a set <m>X</m>,
        we usually write <m>x \sim y</m> instead of <m>(x, y) \in R</m>.
        If the equivalence relation already has an associated notation such as <m>=</m>,
        <m>\equiv</m>, or <m>\cong</m>,
        we will use that notation.
      </p>

      <example xml:id="sets-example-equivalent-fractions">
        <p>
          Let <m>p</m>, <m>q</m>, <m>r</m>,
          and <m>s</m> be integers, where <m>q</m> and <m>s</m> are nonzero.
          Define <m>p/q \sim r/s</m> if <m>ps = qr</m>.
          Clearly <m>\sim</m> is reflexive and symmetric.
          To show that it is also transitive,
          suppose that <m>p/q \sim r/s</m> and <m>r/s \sim t/u</m>,
          with <m>q</m>,
          <m>s</m>, and <m>u</m> all nonzero.
          Then <m>ps = qr</m> and <m>ru = st</m>.
          Therefore,
          <me>
            psu = qru = qst
          </me>.
          Since <m>s \neq 0</m>, <m>pu = qt</m>.
          Consequently, <m>p/q \sim t/u</m>.
        </p>
      </example>

      <example xml:id="sets-example-equivalent-derivative">
        <p>
          Suppose that <m>f</m> and <m>g</m> are differentiable functions on <m>{\mathbb R}</m>.
          We can define an equivalence relation on such functions by letting
          <m>f(x) \sim g(x)</m> if <m>f'(x) = g'(x)</m>.
          It is clear that <m>\sim</m> is both reflexive and symmetric.
          To demonstrate transitivity,
          suppose that <m>f(x) \sim g(x)</m> and <m>g(x) \sim h(x)</m>.
          From calculus we know that
          <m>f(x) - g(x) = c_1</m> and <m>g(x)- h(x) = c_2</m>,
          where <m>c_1</m> and <m>c_2</m> are both constants.
          Hence,
          <me>
            f(x) - h(x) = ( f(x) - g(x)) + ( g(x)- h(x)) = c_1 + c_2
          </me>
          and <m>f'(x) - h'(x) = 0</m>.
          Therefore, <m>f(x) \sim h(x)</m>.
        </p>
      </example>

      <example xml:id="sets-example-equivalent-circles">
        <p>
          For <m>(x_1, y_1 )</m> and
          <m>(x_2, y_2)</m> in <m>{\mathbb R}^2</m>,
          define <m>(x_1, y_1 ) \sim (x_2, y_2)</m> if <m>x_1^2 + y_1^2 = x_2^2 + y_2^2</m>.
          Then <m>\sim</m> is an equivalence relation on <m>{\mathbb R}^2</m>.
        </p>
      </example>

      <example xml:id="sets-example-equivalent-matrices">
        <p>
          Let <m>A</m> and <m>B</m> be
          <m>2 \times 2</m> matrices with entries in the real numbers.
          We can define an equivalence relation on the set of <m>2 \times 2</m> matrices,
          by saying <m>A \sim B</m> if there exists an invertible matrix <m>P</m> such that <m>PAP^{-1} = B</m>.
          For example, if
          <me>
            A =
            \begin{pmatrix}
            1 &amp; 2 \\
            -1 &amp; 1
            \end{pmatrix}
            \quad \text{and} \quad
            B =
            \begin{pmatrix}
            -18 &amp; 33 \\
            -11 &amp; 20
            \end{pmatrix}
          </me>,
          then <m>A \sim B</m> since <m>PAP^{-1} = B</m> for
          <me>
            P =
            \begin{pmatrix}
            2 &amp; 5 \\
            1 &amp; 3
            \end{pmatrix}
          </me>.
          Let <m>I</m> be the <m>2 \times 2</m> identity matrix; that is,
          <me>
            I =
            \begin{pmatrix}
            1 &amp; 0 \\
            0 &amp; 1
            \end{pmatrix}
          </me>.
          Then <m>IAI^{-1} = IAI = A</m>;
          therefore, the relation is reflexive.
          To show symmetry, suppose that <m>A \sim B</m>.
          Then there exists an invertible matrix <m>P</m> such that <m>PAP^{-1} = B</m>.
          So
          <me>
            A = P^{-1} B P = P^{-1} B (P^{-1})^{-1}
          </me>.
          Finally, suppose that <m>A \sim B</m> and <m>B \sim C</m>.
          Then there exist invertible matrices <m>P</m> and <m>Q</m> such that
          <m>PAP^{-1} = B</m> and  <m>QBQ^{-1} = C</m>.
          Since
          <me>
            C = QBQ^{-1} = QPAP^{-1} Q^{-1} = (QP)A(QP)^{-1}
          </me>,
          the relation is transitive.
          Two matrices that are equivalent in this manner are said to be <idx><h>Matrix</h><h>similar</h></idx><term>similar</term>.
        </p>
      </example>

      <p>
        A <term>partition</term><idx><h>Partitions</h></idx>
        <m>{\mathcal P}</m> of a set <m>X</m> is a collection of nonempty sets
        <m>X_1, X_2, \ldots</m> such that <m>X_i \cap X_j = \emptyset</m> for
        <m>i \neq j</m> and <m>\bigcup_k X_k = X</m>.
        Let <m>\sim</m> be an equivalence relation on a set <m>X</m> and let <m>x \in X</m>.
        Then <m>[x] = \{ y \in X : y \sim x \}</m> is called the
        <term>equivalence class</term><idx><h>Equivalence class</h></idx>
        of <m>x</m>.
        We will see that an equivalence relation gives rise to a partition via equivalence classes.
        Also, whenever a partition of a set exists,
        there is some natural underlying equivalence relation,
        as the following theorem demonstrates.
      </p>

      <theorem>
        <statement>
          <p>
            Given an equivalence relation <m>\sim</m> on a set <m>X</m>,
            the equivalence classes of <m>X</m> form a partition of <m>X</m>.
            Conversely, if <m>{\mathcal P} = \{ X_i\}</m> is a partition of a set <m>X</m>,
            then there is an equivalence relation on <m>X</m> with equivalence classes <m>X_i</m>.
          </p>
        </statement>

        <proof>
          <p>
            Suppose there exists an equivalence relation <m>\sim</m> on the set <m>X</m>.
            For any <m>x \in X</m>, the reflexive property shows that
            <m>x \in [x]</m> and so <m>[x]</m> is nonempty.
            Clearly <m>X = \bigcup_{x \in X} [x]</m>.
            Now let <m>x, y \in X</m>.
            We need to show that either
            <m>[x] = [y]</m> or <m>[x] \cap [y] = \emptyset</m>.
            Suppose that the intersection of <m>[x]</m> and <m>[y]</m> is not empty and that <m>z \in [x] \cap [y]</m>.
            Then <m>z \sim x</m> and <m>z \sim y</m>.
            By symmetry and transitivity <m>x \sim y</m>;
            hence, <m>[x] \subset [y]</m>.
            Similarly, <m>[y] \subset [x]</m> and so <m>[x] = [y]</m>.
            Therefore, any two equivalence classes are either disjoint or exactly the same.
          </p>

          <p>
            Conversely, suppose that <m>{\mathcal P} = \{X_i\}</m> is a partition of a set <m>X</m>.
            Let two elements be equivalent if they are in the same partition.
            Clearly, the relation is reflexive.
            If <m>x</m> is in the same partition as <m>y</m>,
            then <m>y</m> is in the same partition as <m>x</m>,
            so <m>x \sim y</m> implies <m>y \sim x</m>.
            Finally, if <m>x</m> is in the same partition as <m>y</m> and <m>y</m> is in the same partition as <m>z</m>,
            then <m>x</m> must be in the same partition as <m>z</m>,
            and transitivity holds.
          </p>
        </proof>
      </theorem>

      <corollary>
        <statement>
          <p>
            Two equivalence classes of an equivalence relation are either disjoint or equal.
          </p>
        </statement>
      </corollary>

      <p>
        Let us examine some of the partitions given by the equivalence classes in the last set of examples.
      </p>

      <example xml:id="sets-example-fraction-partition">
        <p>
          In the equivalence relation in <xref ref="sets-example-equivalent-fractions"/>,
          two pairs of integers, <m>(p,q)</m> and <m>(r,s)</m>,
          are in the same equivalence class when they reduce to the same fraction in its lowest terms.
        </p>
      </example>

      <example xml:id="sets-example-matrix-partition">
        <p>
          In the equivalence relation in <xref ref="sets-example-equivalent-derivative"/>,
          two functions <m>f(x)</m> and <m>g(x)</m> are in the same partition when they differ by a constant.
        </p>
      </example>

      <example xml:id="sets-example-circle-partition">
        <p>
          We defined an equivalence class on <m>{\mathbb R}^2</m> by
          <m>(x_1, y_1 ) \sim (x_2, y_2)</m> if <m>x_1^2 + y_1^2 = x_2^2 + y_2^2</m>.
          Two pairs of real numbers are in the same partition when they lie on the same circle about the origin.
        </p>
      </example>

      <example xml:id="sets-example-congruent-integers">
        <p>
          Let <m>r</m> and <m>s</m> be two integers and suppose that <m>n \in {\mathbb N}</m>.
          We say that <m>r</m> is <term>congruent</term><idx><h>Congruence modulo <m>n</m></h></idx> to <m>s</m>
          <term>modulo</term> <m>n</m>,
          or <m>r</m> is congruent to <m>s</m> mod <m>n</m>,
          if <m>r - s</m> is evenly divisible by <m>n</m>;
          that is, <m>r - s = nk</m>  for some <m>k \in {\mathbb Z}</m>.
          In this case we write <m>r \equiv s \pmod{n}</m>.

          <notation>
            <usage><m>a \equiv b \pmod{n}</m></usage>
            <description><m>a</m> is congruent to <m>b</m> modulo <m>n</m></description>
          </notation>

          For example, <m>41 \equiv 17 \pmod{ 8}</m> since
          <m>41 - 17=24</m> is divisible by <m>8</m>.
          We claim that congruence modulo <m>n</m> forms an equivalence relation of <m>{\mathbb Z}</m>.
          Certainly any integer <m>r</m> is equivalent to itself since
          <m>r - r = 0</m> is divisible by <m>n</m>.
          We will now show that the relation is symmetric.
          If <m>r \equiv s \pmod{ n}</m>,
          then <m>r - s = -(s -r)</m> is divisible by <m>n</m>.
          So <m>s - r</m> is divisible by <m>n</m> and <m>s \equiv r \pmod{ n}</m>.
          Now suppose that <m>r \equiv s \pmod{ n}</m> and <m>s \equiv t \pmod{ n}</m>.
          Then there exist integers <m>k</m> and <m>l</m> such that
          <m>r -s = kn</m> and <m>s - t = ln</m>.
          To show transitivity,
          it is necessary to prove that <m>r - t</m> is divisible by <m>n</m>.
          However,
          <me>
            r - t = r - s + s - t = kn + ln = (k + l)n
          </me>,
          and so <m>r - t</m> is divisible by <m>n</m>.
        </p>

        <p>
          If we consider the equivalence relation established by the integers modulo <m>3</m>, then
          <md>
            <mrow>{[0]} &amp; = \{ \ldots, -3, 0, 3, 6, \ldots \},</mrow>
            <mrow>{[1]} &amp; = \{ \ldots, -2, 1, 4, 7, \ldots \},</mrow>
            <mrow>{[2]} &amp; = \{ \ldots, -1, 2, 5, 8, \ldots \}</mrow>
          </md>.
          Notice that <m>[0] \cup [1] \cup [2] = {\mathbb Z}</m> and also that the sets are disjoint.
          The sets <m>[0]</m>, <m>[1]</m>,
          and <m>[2]</m> form a partition of the integers.
        </p>

        <p>
          The integers modulo <m>n</m> are a very important example in the study of abstract algebra and will become quite useful in our investigation of various algebraic structures such as groups and rings.
          In our discussion of the integers modulo <m>n</m> we have actually assumed a result known as the division algorithm,
          which will be stated and proved in <xref ref="integers"/>.
        </p>
      </example>

      <paragraphs component="sage-blurb">
        <title>Sage</title>
        <p>
          Sage is a powerful, open source, system for exact, numerical, and symbolic mathematical computations.
          Electronic versions of this text contain comprehensive introductions to the use of Sage to study abstract algebra,
          and include a set of exercises.
          These can be found at the book's website.
          Due to the format of this version of the text,
          at the end of each chapter we have just included brief suggestions of how Sage might be employed.
        </p>
      </paragraphs>
    </subsection>

  </section>

  <reading-questions>

    <exercise>
      <statement>
        <p>
          What do relations and mappings have in common?
        </p>
      </statement>
      <response/>
    </exercise>

    <exercise>
      <statement>
        <p>
          What makes relations and mappings different?
        </p>
      </statement>
      <response/>
    </exercise>

    <exercise>
      <statement>
        <p>
          State carefully the three defining properties of an equivalence relation.
          In other words, do not just <em>name</em>
          the properties, give their definitions.
        </p>
      </statement>
      <response/>
    </exercise>

    <exercise>
      <statement>
        <p>
          What is the big deal about equivalence relations? (Hint: Partitions.)
        </p>
      </statement>
      <response/>
    </exercise>

    <exercise>
      <statement>
        <p>
          Describe a general technique for proving that two sets are equal.
        </p>
      </statement>
      <response/>
    </exercise>

  </reading-questions>
    <!-- Exercises with Solutions  -->
    <!-- File: sets.xml  -->
    <!-- Title: Preliminaries -->
  <exercises xml:id="sets-exercises" filenamebase="sets">
    <title>Exercises</title>
    <exercise number="1" xml:id="sets-exercise-set-operations">
      <statement>
        <p>
          Suppose that
          <md>
            <mrow>A &amp; = \{ x : x \in \mathbb N \text{ and } x \text{ is even} \},</mrow>
            <mrow>B &amp; = \{x : x \in \mathbb N \text{ and } x \text{ is prime}\},</mrow>
            <mrow>C &amp; = \{ x : x \in \mathbb N \text{ and } x \text{ is a multiple of } 5\}</mrow>
          </md>.
          Describe each of the following sets.

          <ol cols="2">
            <li>
              <p>
                <m>A \cap B</m>
              </p>
            </li>

            <li>
              <p>
                <m>B \cap C</m>
              </p>
            </li>

            <li>
              <p>
                <m>A \cup B</m>
              </p>
            </li>

            <li>
              <p>
                <m>A \cap (B \cup C)</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
      <hint>
        <p>
          (a) <m>A \cap B = \{ 2 \}</m>; (b) <m>B \cap C = \{ 5 \}</m>.
        </p>
      </hint>
    </exercise>

    <exercise number="2" xml:id="sets-exercise-set-operations-empty-set">
      <statement>
        <p>
          If <m>A = \{ a, b, c \}</m>,
          <m>B = \{ 1, 2, 3 \}</m>, <m>C = \{ x \}</m>, and <m>D = \emptyset</m>,
          list all of the elements in each of the following sets.

          <ol cols="2">
            <li>
              <p>
                <m>A \times B</m>
              </p>
            </li>

            <li>
              <p>
                <m>B \times A</m>
              </p>
            </li>

            <li>
              <p>
                <m>A \times B \times C</m>
              </p>
            </li>

            <li>
              <p>
                <m>A \times D</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
      <hint>
        <p>
          (a) <m>A \times B = \{ (a,1), (a,2), (a,3), (b,1), (b,2), (b,3), (c,1), (c,2), (c,3) \}</m>; (d) <m>A \times D = \emptyset</m>.
        </p>
      </hint>
    </exercise>

    <exercise number="3" xml:id="sets-exercise-cartesian-product-nonempty-set">
      <statement>
        <p>
          Find an example of two nonempty sets <m>A</m> and <m>B</m> for which <m>A \times B = B \times A</m> is true.
        </p>
      </statement>
    </exercise>

    <exercise number="4" xml:id="sets-exercise-union-intersect-empty-set">
      <statement>
        <p>
          Prove <m>A \cup \emptyset = A</m> and <m>A \cap \emptyset = \emptyset</m>.
        </p>
      </statement>
    </exercise>

    <exercise number="5" xml:id="sets-exercise-union-intersection-commute">
      <statement>
        <p>
          Prove <m>A \cup B = B \cup A</m> and <m>A \cap B = B \cap A</m>.
        </p>
      </statement>
    </exercise>

    <exercise number="6" xml:id="sets-exercise-union-distributes">
      <statement>
        <p>
          Prove <m>A \cup (B \cap C) = (A \cup B) \cap (A \cup C)</m>.
        </p>
      </statement>
      <hint>
        <p>
           Observe that <m>x \in A \cup B</m> if and only if <m>x \in A</m> or <m>x \in B</m>.
          Equivalently, <m>x \in B</m> or <m>x \in A</m>,
          which is the same as <m>x \in B \cup A</m>.
          Therefore, <m>A \cup B = B \cup A</m>.
        </p>
      </hint>
    </exercise>

    <exercise number="7" xml:id="sets-exercise-intersection-distributes">
      <statement>
        <p>
          Prove <m>A \cap (B \cup C) = (A \cap B) \cup (A \cap C)</m>.
        </p>
      </statement>
    </exercise>

    <exercise number="8" xml:id="sets-exercise-subset-iff-intersection">
      <statement>
        <p>
          Prove <m>A \subset B</m> if and only if <m>A \cap B = A</m>.
        </p>
      </statement>
    </exercise>

    <exercise number="9" xml:id="sets-exercise-demorgan">
      <statement>
        <p>
          Prove <m>(A \cap B)' = A' \cup B'</m>.
        </p>
      </statement>
    </exercise>

    <exercise number="10" xml:id="sets-exercise-set-minus-union">
      <statement>
        <p>
          Prove <m>A \cup B = (A \cap B) \cup (A \setminus B) \cup (B \setminus A)</m>.
        </p>
      </statement>
      <hint>
        <p>
          <m>(A \cap B) \cup (A \setminus B) \cup (B \setminus A) = (A \cap B) \cup (A \cap B') \cup (B \cap A') = [A \cap (B \cup B')] \cup (B \cap A') = A \cup (B \cap A') = (A \cup B) \cap (A \cup A') = A \cup B</m>.
        </p>
      </hint>
    </exercise>

    <exercise number="11" xml:id="sets-exercise-times-union">
      <statement>
        <p>
          Prove <m>(A \cup B) \times C = (A \times C ) \cup (B \times C)</m>.
        </p>
      </statement>
    </exercise>

    <exercise number="12" xml:id="sets-exercise-set-minus-empty-set">
      <statement>
        <p>
          Prove <m>(A \cap B) \setminus B = \emptyset</m>.
        </p>
      </statement>
    </exercise>

    <exercise number="13" xml:id="sets-exercise-union-set-minus">
      <statement>
        <p>
          Prove <m>(A \cup B) \setminus B = A \setminus B</m>.
        </p>
      </statement>
    </exercise>

    <exercise number="14" xml:id="sets-exercise-set-minus-distribute">
      <statement>
        <p>
          Prove <m>A \setminus (B \cup C) = (A \setminus B) \cap (A \setminus C)</m>.
        </p>
      </statement>
      <hint>
        <p>
          <m>A \setminus (B \cup C) = A \cap (B \cup C)' = (A \cap A) \cap (B' \cap C') = (A \cap B') \cap (A \cap C') = (A \setminus B) \cap (A \setminus C)</m>.
        </p>
      </hint>
    </exercise>

    <exercise number="15" xml:id="sets-exercise-a-cap-b-setminus-c">
      <statement>
        <p>
          Prove <m>A \cap (B \setminus C) = (A \cap B) \setminus (A \cap C)</m>.
        </p>
      </statement>
    </exercise>

    <exercise number="16" xml:id="sets-exercise-a-csetminus-b-cup-b-setminus-a">
      <statement>
        <p>
          Prove <m>(A \setminus B) \cup (B \setminus A) = (A \cup B) \setminus (A \cap B)</m>.
        </p>
      </statement>
    </exercise>

    <exercise number="17" xml:id="sets-exercise-which-are-maps">
      <statement>
        <p>
          Which of the following relations <m>f: {\mathbb Q} \rightarrow {\mathbb Q}</m> define a mapping?
          In each case,
          supply a reason why <m>f</m> is or is not a mapping.

          <ol cols="2">
            <li>
              <p>
                <m>\displaystyle f(p/q) = \frac{p+ 1}{p - 2}</m>
              </p>
            </li>

            <li>
              <p>
                <m>\displaystyle f(p/q) = \frac{3p}{3q}</m>
              </p>
            </li>

            <li>
              <p>
                <m>\displaystyle f(p/q) = \frac{p+q}{q^2}</m>
              </p>
            </li>

            <li>
              <p>
                <m>\displaystyle f(p/q) = \frac{3 p^2}{7 q^2} - \frac{p}{q}</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
      <hint>
        <p>
          (a) Not a map since <m>f(2/3)</m> is undefined; (b) this is a map; (c) not a map,
          since <m>f(1/2) = 3/4</m> but <m>f(2/4)=3/8</m>; (d) this is a map.
        </p>
      </hint>
    </exercise>

    <exercise number="18" xml:id="sets-exercise-which-are-one-to-one-onto">
      <statement>
        <p>
          Determine which of the following functions are one-to-one and which are onto.
          If the function is not onto, determine its range.

          <ol>
            <li>
              <p>
                <m>f: {\mathbb R} \rightarrow {\mathbb R}</m> defined by <m>f(x) = e^x</m>
              </p>
            </li>

            <li>
              <p>
                <m>f: {\mathbb Z} \rightarrow {\mathbb Z}</m> defined by <m>f(n) = n^2 + 3</m>
              </p>
            </li>

            <li>
              <p>
                <m>f: {\mathbb R} \rightarrow {\mathbb R}</m> defined by <m>f(x) = \sin x</m>
              </p>
            </li>

            <li>
              <p>
                <m>f: {\mathbb Z} \rightarrow {\mathbb Z}</m> defined by <m>f(x) = x^2</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
      <hint>
        <p>
          (a) <m>f</m> is one-to-one but not onto.
          <m>f({\mathbb R} ) = \{ x \in {\mathbb R} : x \gt 0 \}</m>. (c) <m>f</m> is neither one-to-one nor onto. <m>f(\mathbb R) = \{ x : -1 \leq x \leq 1 \}</m>.
        </p>
      </hint>
    </exercise>

    <exercise number="19" xml:id="sets-exercise-inverse-composition">
      <statement>
        <p>
          Let <m>f :A \rightarrow B</m> and
          <m>g : B \rightarrow C</m> be invertible mappings;
          that is, mappings such that <m>f^{-1}</m> and <m>g^{-1}</m> exist.
          Show that <m>(g \circ f)^{-1} =f^{-1} \circ g^{-1}</m>.
        </p>
      </statement>
    </exercise>

    <exercise number="20" xml:id="sets-exercise-functions-N-to-N">
      <statement>
        <p>
          <ol>
            <li>
              <p>
                Define a function <m>f: {\mathbb N} \rightarrow {\mathbb N}</m> that is one-to-one but not onto.
              </p>
            </li>

            <li>
              <p>
                Define a function <m>f: {\mathbb N} \rightarrow {\mathbb N}</m> that is onto but not one-to-one.
              </p>
            </li>
          </ol>
        </p>
      </statement>
      <hint>
        <p>
          (a) <m>f(n) = n + 1</m>.
        </p>
      </hint>
    </exercise>

    <exercise number="21" xml:id="sets-exercise-relation-on-circles">
      <statement>
        <p>
          Prove the relation defined on
          <m>{\mathbb R}^2</m> by <m>(x_1, y_1 ) \sim (x_2, y_2)</m> if
          <m>x_1^2 + y_1^2 = x_2^2 + y_2^2</m> is an equivalence relation.
        </p>
      </statement>
    </exercise>

    <exercise number="22" xml:id="sets-exercise-bijective-surjective-compostion">
      <statement>
        <p>
          Let <m>f : A \rightarrow B</m> and <m>g : B \rightarrow C</m> be maps.

          <ol>
            <li>
              <p>
                If <m>f</m> and <m>g</m> are both one-to-one functions,
                show that <m>g \circ f</m> is one-to-one.
              </p>
            </li>

            <li>
              <p>
                If <m>g \circ f</m> is onto, show that <m>g</m> is onto.
              </p>
            </li>

            <li>
              <p>
                If <m>g \circ f</m> is one-to-one,
                show that <m>f</m> is one-to-one.
              </p>
            </li>

            <li>
              <p>
                If <m>g \circ f</m> is one-to-one and <m>f</m> is onto,
                show that <m>g</m> is one-to-one.
              </p>
            </li>

            <li>
              <p>
                If <m>g \circ f</m> is onto and <m>g</m> is one-to-one,
                show that <m>f</m> is onto.
              </p>
            </li>
          </ol>
        </p>
      </statement>
      <hint>
        <p>
          (a) Let <m>x, y \in A</m>.
          Then <m>g(f(x)) = (g \circ f)(x) = (g \circ f)(y) = g(f(y))</m>.
          Thus, <m>f(x) = f(y)</m> and <m>x = y</m>,
          so <m>g \circ f</m> is one-to-one. (b) Let <m>c \in C</m>,
          then <m>c = (g \circ f)(x) = g(f(x))</m> for some <m>x \in A</m>.
          Since <m>f(x) \in B</m>, <m>g</m> is onto.
        </p>
      </hint>
    </exercise>

    <exercise number="23"  xml:id="sets-exercise-inverse-rational-function">
      <statement>
        <p>
          Define a function on the real numbers by
          <me>
            f(x) = \frac{x + 1}{x - 1}
          </me>.
          What are the domain and range of <m>f</m>?
          What is the inverse of <m>f</m>?
          Compute <m>f \circ f^{-1}</m> and <m>f^{-1} \circ f</m>.
        </p>
      </statement>
      <hint>
        <p>
          <m>f^{-1}(x) = (x+1)/(x-1)</m>.
        </p>
      </hint>
    </exercise>

    <exercise number="24" xml:id="sets-exercise-maps-set-operations">
      <statement>
        <p>
          Let <m>f: X \rightarrow Y</m> be a map with
          <m>A_1, A_2 \subset X</m> and <m>B_1, B_2 \subset Y</m>.

          <ol>
            <li>
              <p>
                Prove <m>f( A_1 \cup A_2 ) = f( A_1) \cup f( A_2 )</m>.
              </p>
            </li>

            <li>
              <p>
                Prove <m>f( A_1 \cap A_2 ) \subset f( A_1) \cap f( A_2 )</m>.
                Give an example in which equality fails.
              </p>
            </li>

            <li>
              <p>
                Prove <m>f^{-1}( B_1 \cup B_2 ) = f^{-1}( B_1) \cup f^{-1}(B_2 )</m>, where
                <me>
                  f^{-1}(B) = \{ x \in X : f(x) \in B \}
                </me>.
              </p>
            </li>

            <li>
              <p>
                Prove <m>f^{-1}( B_1 \cap B_2 ) = f^{-1}( B_1) \cap f^{-1}( B_2 )</m>.
              </p>
            </li>

            <li>
              <p>
                Prove <m>f^{-1}( Y \setminus B_1 ) = X \setminus f^{-1}( B_1)</m>.
              </p>
            </li>
          </ol>
        </p>
      </statement>
      <hint>
        <p>
          (a) Let <m>y \in f(A_1 \cup A_2)</m>.
          Then there exists an <m>x \in A_1 \cup A_2</m> such that <m>f(x) = y</m>.
          Hence, <m> y \in f(A_1)</m> or <m>f(A_2) </m>.
          Therefore, <m> y \in f(A_1) \cup f(A_2)</m>.
          Consequently,
          <m> f(A_1 \cup A_2) \subset f(A_1) \cup f(A_2)</m>.
          Conversely, if <m>y \in f(A_1) \cup f(A_2)</m>,
          then <m> y \in f(A_1)</m> or <m>f(A_2)</m>.
          Hence, there exists an <m>x</m> in <m>A_1</m> or <m>A_2</m> such that <m>f(x) = y</m>.
          Thus, there exists an <m>x \in A_1 \cup A_2</m> such that <m>f(x) = y</m>.
          Therefore, <m> f(A_1) \cup f(A_2) \subset f(A_1 \cup A_2)</m>,
          and <m>f(A_1 \cup A_2) = f(A_1) \cup f(A_2)</m>.
        </p>
      </hint>
    </exercise>

    <exercise number="25" xml:id="sets-exercise-determine-equivalence-relations">
      <statement>
        <p>
          Determine whether or not the following relations are equivalence relations on the given set.
          If the relation is an equivalence relation,
          describe the partition given by it.
          If the relation is not an equivalence relation,
          state why it fails to be one.

          <ol cols="2">
            <li>
              <p>
                <m>x \sim y</m> in <m>{\mathbb R}</m> if <m>x \geq y</m>
              </p>
            </li>

            <li>
              <p>
                <m>m \sim n</m> in <m>{\mathbb Z}</m> if <m>mn &gt; 0</m>
              </p>
            </li>

            <li>
              <p>
                <m>x \sim y</m> in <m>{\mathbb R}</m> if <m>|x - y| \leq 4</m>
              </p>
            </li>

            <li>
              <p>
                <m>m \sim n</m> in <m>{\mathbb Z}</m> if <m>m \equiv n \pmod{6}</m>
              </p>
            </li>
          </ol>
        </p>
      </statement>
      <hint>
        <p>
          (a) The relation fails to be symmetric. (b) The relation is not reflexive,
          since <m>0</m> is not equivalent to itself. (c) The relation is not transitive.
        </p>
      </hint>
    </exercise>

    <exercise number="26" xml:id="sets-exercise-nonsymmetric-circle">
      <statement>
        <p>
          Define a relation <m>\sim</m> on <m>{\mathbb R}^2</m> by stating that
          <m>(a, b) \sim (c, d)</m> if and only if <m>a^2 + b^2 \leq c^2 + d^2</m>.
          Show that <m>\sim</m> is reflexive and transitive but not symmetric.
        </p>
      </statement>
    </exercise>

    <exercise number="27" xml:id="sets-exercise-matrix-mult-well-defined">
      <statement>
        <p>
          Show that an <m>m \times n</m> matrix gives rise to a well-defined map from
          <m>{\mathbb R}^n</m> to <m>{\mathbb R}^m</m>.
        </p>
      </statement>
    </exercise>

    <exercise number="28" xml:id="sets-exercise-reflexive-error">
      <statement>
        <p>
          Find the error in the following argument by providing a counterexample.
          <q>The reflexive property is redundant in the axioms for an equivalence relation.
          If <m>x \sim y</m>, then <m>y \sim x</m> by the symmetric property.
          Using the transitive property,
          we can deduce that <m>x \sim x</m>.</q>
        </p>
      </statement>
      <hint>
        <p>
          Let <m>X = {\mathbb N} \cup \{ \sqrt{2}\, \}</m> and define
          <m>x \sim y</m> if <m>x + y \in {\mathbb N}</m>.
        </p>
      </hint>
    </exercise>

    <exercise number="29" xml:id="sets-exercise-projective-real-line">
      <title>Projective Real Line</title>
      <statement>
        <p>
          Define a relation on <m>{\mathbb R}^2 \setminus \{ (0,0) \}</m> by letting
          <m>(x_1, y_1) \sim (x_2, y_2)</m> if there exists a nonzero real number <m>\lambda</m> such that <m>(x_1, y_1) = ( \lambda x_2, \lambda y_2)</m>.
          Prove that <m>\sim</m> defines an equivalence relation on <m>{\mathbb R}^2 \setminus (0,0)</m>.
          What are the corresponding equivalence classes?
          This equivalence relation defines the projective line,
          denoted by <m>{\mathbb P}({\mathbb R}) </m>,
          which is very important in geometry.
        </p>
      </statement>
    </exercise>

  </exercises>
  <!--Todo Figure out how to include comments in front of the list of references-->

  <references xml:id="sets-references">
    <title>References and Suggested Readings</title>
        <!--
		<p>The following list contains references suitable for further reading.  With the exception of [8] and [9] and perhaps [1] and [3], all of these books are more or less  at the same level as this text.  Interesting applications of algebra  can be found in [2], [5], [10], and [11].</p>
-->
    <biblio type="raw">
<!-- was [1] --><!-- Reference updated 5/4/2010 - TWJ -->
      Artin, M.
      <title>Algebra (Classic Version)</title>. 2nd ed. Pearson, Upper Saddle River, NJ, 2018.
    </biblio>

    <biblio type="raw">
<!-- was [2] --><!-- Reference updated 5/4/2010 - TWJ -->
      Childs, L.
      <title>A Concrete Introduction to Higher Algebra</title>. 2nd ed. Springer-Verlag, New York, 1995.
    </biblio>

    <biblio type="raw">
<!-- was [3] --><!-- Reference updated 5/4/2010 - TWJ -->
      Dummit, D. and Foote, R.
      <title>Abstract Algebra</title>. 3rd ed. Wiley, New York, 2003.
    </biblio>

    <biblio type="raw">
<!-- was [2] --><!--Seems to be out of print 5/4/2010 - TWJ -->
      Ehrlich, G.
      <title>Fundamental Concepts of Algebra</title>. PWS-KENT, Boston, 1991.
    </biblio>

    <biblio type="raw">
<!-- was [4] --><!-- Reference updated 5/4/2010 - TWJ -->
      Fraleigh, J. B.
      <title>A First Course in Abstract Algebra</title>. 7th ed. Pearson, Upper Saddle River, NJ, 2003.
    </biblio>

    <biblio type="raw">
<!-- was [5] --><!-- Reference updated 5/4/2010 - TWJ -->
      Gallian, J. A.
      <title>Contemporary Abstract Algebra</title>. 7th ed. Brooks/Cole, Belmont, CA, 2009.
    </biblio>

    <biblio type="raw">
<!-- was [6] --><!-- I believe that this is not still in print, but it is certainly available through amazon.com 5/4/2010 - TWJ -->
      Halmos, P.
      <title>Naive Set Theory</title>.  Springer, New York, 1991. One of the best references for set theory.
    </biblio>

    <biblio type="raw">
<!-- was [7] --><!-- Reference updated 5/4/2010 - TWJ -->
      Herstein, I. N.
      <title>Abstract Algebra</title>. 3rd ed. Wiley, New York, 1996.
    </biblio>

    <biblio type="raw">
<!-- was [8] --><!-- Reference updated 5/4/2010 - TWJ -->
      Hungerford, T. W.
      <title>Algebra</title>. Springer, New York, 1974. One
      of the standard graduate algebra texts.
    </biblio>

    <biblio type="raw">
<!-- was [9] --><!-- Reference updated 5/4/2010 - TWJ -->
      Lang, S.
      <title>Algebra</title>. 3rd ed. Springer, New York, 2002.
      Another standard graduate text.
    </biblio>

    <biblio type="raw">
<!-- was [10] --><!-- Reference updated 5/4/2010 - TWJ -->
      Lidl, R. and Pilz, G.
      <title>Applied Abstract Algebra</title>. 2nd ed. Springer,
      New York, 1998.
    </biblio>

    <biblio type="raw">
<!-- was [11] --><!-- No longer in print 5/4/2010 - TWJ -->
      Mackiw, G.
      <title>Applications of Abstract Algebra</title>. Wiley, New York,
      1985.
    </biblio>

    <biblio type="raw">
<!-- was [12] -->
      Nickelson, W. K. <!-- Reference updated 5/4/2010 - TWJ -->
      <title>Introduction to Abstract Algebra</title>. 3rd ed. Wiley, New York,
      2006.
    </biblio>

    <biblio type="raw">
<!-- was [13] --><!-- Reference updated 5/4/2010 - TWJ -->
      Solow, D.
      <title>How to Read and Do Proofs</title>. 5th ed. Wiley, New York,
      2009.
    </biblio>

    <biblio type="raw">
<!-- was [14] --><!-- No longer in print 5/4/2010 - TWJ -->
      van der Waerden, B. L.
      <title>A History of Algebra</title>. Springer-Verlag,
      New York, 1985. An account of the historical development of algebra.
    </biblio>
  </references>



  <section xml:id="sets-sage" component="sage-info">
    <title>Sage</title>
    <introduction>
      <p>
        Sage is a powerful system for studying and exploring many different areas of mathematics.
        In this textbook, you will study a variety of algebraic structures,
        such as groups, rings and fields.
        Sage does an excellent job of implementing many features of these objects as we will see in the chapters ahead.
        But here and now, in this initial chapter,
        we will concentrate on a few general ways of getting the most out of working with Sage.
      </p>

      <p>
        You may use Sage several different ways.
        It may be used as a command-line program when installed on your own computer.
        Or it might be a web application such as the SageMathCloud.
        Our writing will assume that you are reading this as a worksheet within the Sage Notebook (a web browser interface),
        or this is a section of the entire book presented as web pages,
        and you are employing the Sage Cell Server via those pages.
        After the first few chapters the explanations should work equally well for whatever vehicle you use to execute Sage commands.
      </p>
    </introduction>

    <subsection>
      <title>Executing Sage Commands</title>
      <p>
        Most of your interaction will be by typing commands into a <em>compute cell</em>.
        If you are reading this in the Sage Notebook or as a webpage version of the book,
        then you will see a compute cell just below this paragraph.
        Click once inside the compute cell and if you are in the Sage Notebook,
        you will get a more distinctive border around it,
        a blinking cursor inside, plus a cute little
        <q>evaluate</q> link below.
      </p>

      <sage/>

      <p>
        At the cursor,
        type <c>2+2</c> and then click on the evaluate link.
        Did a <c>4</c> appear below the cell?
        If so, you have successfully sent a command off for Sage to evaluate and you have received back the (correct) answer.
      </p>

      <p>
        Here is another compute cell.
        Try evaluating the command <c>factorial(300)</c> here.
      </p>

      <sage/>

      <p>
        Hmmmmm.
        That is quite a big integer!
        If you see slashes at the end of each line,
        this means the result is continued onto the next line,
        since there are 615 total digits in the result.
      </p>

      <p>
        To make new compute cells in the Sage Notebook (only),
        hover your mouse just above another compute cell,
        or just below some output from a compute cell.
        When you see a skinny blue bar across the width of your worksheet,
        click and you will open up a new compute cell, ready for input.
        Note that your worksheet will remember any calculations you make,
        in the order you make them, no matter where you put the cells,
        so it is best to stay organized and add new cells at the bottom.
      </p>

      <p>
        Try placing your cursor just below the monstrous value of <m>300!</m> that you have.
        Click on the blue bar and try another factorial computation in the new compute cell.
      </p>

      <p>
        Each compute cell will show output due to only the very last command in the cell.
        Try to predict the following output before evaluating the cell.
      </p>
            <!-- Doctest framework *will* create output from "b", contrary to notebook behavior -->
            <!-- So doctest will fail, and doctest="not tested" does not help the situation -->
            <sage>
                <input>
            a = 10
            b = 6
            b = b - 10
            a = a + 20
            a
            </input>
                <output>30</output>
            </sage>

      <p>
        The following compute cell will not print anything since the one command does not create output.
        But it will have an effect,
        as you can see when you execute the subsequent cell.
        Notice how this uses the value of <c>b</c> from above.
        Execute this compute cell <em>once</em>.
        Exactly once.
        Even if it <em>appears</em> to do nothing.
        If you execute the cell twice,
        your credit card may be charged twice.
      </p>

            <sage>
                <input>b = b + 50</input>
            </sage>

      <p>
        Now execute this cell, which will produce some output.
      </p>

            <sage>
                <input>b + 20</input>
                <output>66</output>
            </sage>

      <p>
        So <c>b</c> came into existence as <c>6</c>.
        We subtracted <m>10</m> immediately afterward.
        Then a subsequent cell added <c>50</c>.
        This assumes you executed this cell <em>exactly</em> once!
        In the last cell we create <c>b+20</c>
        (but do not save it)
        and it is this value (<m>66</m>) that is output,
        while <c>b</c> is still <m>46</m>.
      </p>

      <p>
        You can combine several commands on one line with a semi-colon.
        This is a great way to get multiple outputs from a compute cell.
        The syntax for building a matrix should be somewhat obvious when you see the output,
        but if not,
        it is not particularly important to understand now.
      </p>

            <sage>
                <input>A = matrix([[3, 1], [5,2]]); A</input>
                <output>
            [3 1]
            [5 2]
            </output>
            </sage>
            <sage>
                <input>print(A); print(); print(A.inverse())</input>
                <output>
            [3 1]
            [5 2]
            &lt;BLANKLINE&gt;
            [ 2 -1]
            [-5  3]
            </output>
            </sage>
    </subsection>

    <subsection>
      <title>Immediate Help</title>
      <p>
        Some commands in Sage are <q>functions,</q>
        an example is <c>factorial()</c> above.
        Other commands are <q>methods</q>
        of an object and are like characteristics of objects,
        an example is <c>.inverse()</c> as a method of a matrix.
        Once you know how to create an object
        (such as a matrix),
        then it is easy to see all the available methods.
        Write the name of the object,
        place a period (<q>dot</q>) and hit the TAB key.
        If you have <c>A</c> defined from above,
        then the compute cell below is ready to go,
        click into it and then hit TAB
        (not <q>evaluate</q>!).
        You should get a long list of possible methods.
      </p>

            <sage doctest="not tested">
                <input>A.</input>
            </sage>

      <p>
        To get some help on how to use a method with an object,
        write its name after a dot
        (with no parentheses)
        and then use a question-mark and hit TAB. (Hit the escape key
        <q>ESC</q> to remove the list,
        or click on the text for a method.)
      </p>

            <sage doctest="not tested">
                <input>A.inverse?</input>
            </sage>

      <p>
        With one more question-mark and a TAB you can see the actual computer instructions that were programmed into Sage to make the method work,
        once you scoll down past the documentation delimited by the triple quotes (<c>"""</c>):
      </p>

            <sage doctest="not tested">
                <input>A.inverse??</input>
            </sage>

      <p>
        It is worthwhile to see what Sage does when there is an error.
        You will probably see a lot of these at first,
        and initially they will be a bit intimidating.
        But with time,
        you will learn how to use them effectively and you will also become more proficient with Sage and see them less often.
        Execute the compute cell below,
        it asks for the inverse of a matrix that has no inverse.
        Then reread the commentary.
      </p>

            <sage>
                <input>
            B = matrix([[2, 20], [5, 50]])
            B.inverse()
            </input>
                <output>
            Traceback (most recent call last):
            ...
            ZeroDivisionError: matrix must be nonsingular
            </output>
            </sage>

      <p>
        Click just to the left of the error message to expand it fully
        (another click hides it totally,
        and a third click brings back the abbreviated form).
        Read the bottom of an error message first,
        it is your best explanation.
        Here a <c>ZeroDivisionError</c> is not 100% accurate,
        but is close.
        The matrix is not invertible,
        not dissimilar to how we cannot divide scalars by zero.
        The remainder of the message begins at the top showing were the error first happened in your code and then the various places where intermediate functions were called,
        until the actual piece of Sage where the problem occurred.
        Sometimes this information will give you some clues,
        sometimes it is totally undecipherable.
        So do not let it scare you if it seems mysterious,
        but do remember to always read the last line first,
        then go back and read the first few lines for something that looks like your code.
      </p>
    </subsection>

    <subsection>
      <title>Annotating Your Work</title>
      <p>
        It is easy to comment on your work when you use the Sage Notebook.
        (The following only applies if you are reading this within a Sage Notebook.
        If you are not,
        then perhaps you can go open up a worksheet in the Sage Notebook and experiment there.)
        You can open up a small word-processor by hovering your mouse until you get a skinny blue bar again,
        but now when you click, also hold the SHIFT key at the same time.
        Experiment with fonts, colors,
        bullet lists, etc and then click the
        <q>Save changes</q> button to exit.
        Double-click on your text if you need to go back and edit it later.
      </p>

      <p>
        Open the word-processor again to create a new bit of text
        (maybe next to the empty compute cell just below).
        Type all of the following <em>exactly,</em>
        <cd>
          <cline>Pythagorean Theorem: $c^2=a^2+b^2$</cline>
        </cd>
        and save your changes.
        The symbols between the dollar signs are written according to the mathematical typesetting language known as <tex/> <mdash/> cruise the internet to learn more about this very popular tool.
        (Well, it is extremely popular among mathematicians and physical scientists.)
      </p>

      <sage/>
    </subsection>

    <subsection>
      <title>Lists</title>
      <p>
        Much of our interaction with sets will be through Sage lists.
        These are not really sets <mdash/> they allow duplicates,
        and order matters.
        But they are so close to sets,
        and so easy and powerful to use that we will use them regularly.
        We will use a fun made-up list for practice,
        the quote marks mean the items are just text,
        with no special mathematical meaning.
        Execute these compute cells as we work through them.
      </p>

            <sage>
                <input>
            zoo = ['snake', 'parrot', 'elephant', 'baboon', 'beetle']
            zoo
            </input>
                <output>
            ['snake', 'parrot', 'elephant', 'baboon', 'beetle']
            </output>
            </sage>

      <p>
        So the square brackets define the boundaries of our list,
        commas separate items, and we can give the list a name.
        To work with just one element of the list,
        we use the name and a pair of brackets with an index.
        Notice that lists have indices that
        <em>begin counting at zero</em>.
        This will seem odd at first and will seem very natural later.
      </p>

            <sage>
                <input>zoo[2]</input>
                <output>'elephant'</output>
            </sage>

      <p>
        We can add a new creature to the zoo,
        it is joined up at the far right end.
      </p>

            <sage>
                <input>zoo.append('ostrich'); zoo</input>
                <output>['snake', 'parrot', 'elephant', 'baboon', 'beetle', 'ostrich']</output>
            </sage>

      <p>
        We can remove a creature.
      </p>

            <sage>
                <input>
            zoo.remove('parrot')
            zoo
            </input>
                <output>['snake', 'elephant', 'baboon', 'beetle', 'ostrich']</output>
            </sage>

      <p>
        We can extract a sublist.
        Here we start with element 1
        (the elephant)
        and go all the way up to, <em>but not including</em>, element 3
        (the beetle).
        Again a bit odd, but it will feel natural later.
        For now, notice that we are extracting two elements of the lists,
        exactly <m>3-1=2</m> elements.
      </p>

            <sage>
                <input>
            mammals = zoo[1:3]
            mammals
            </input>
                <output>['elephant', 'baboon']</output>
            </sage>

      <p>
        Often we will want to see if two lists are equal.
        To do that we will need to sort a list first.
        A function creates a new, sorted list,
        leaving the original alone.
        So we need to save the new one with a new name.
      </p>

            <sage>
                <input>
            newzoo = sorted(zoo)
            newzoo
            </input>
                <output>['baboon', 'beetle', 'elephant', 'ostrich', 'snake']</output>
            </sage>
            <sage>
                <input>
            zoo.sort()
            zoo
            </input>
                <output>['baboon', 'beetle', 'elephant', 'ostrich', 'snake']</output>
            </sage>

      <p>
        Notice that if you run this last compute cell your zoo has changed and some commands above will not necessarily execute the same way.
        If you want to experiment,
        go all the way back to the first creation of the zoo and start executing cells again from there with a fresh zoo.
      </p>

      <p>
        A construction called a <term>list comprehension</term> is especially powerful,
        since it almost exactly mirrors notation we use to describe sets.
        Suppose we want to form the plural of the names of the creatures in our zoo.
        We build a new list, based on all of the elements of our old list.
      </p>

            <sage>
                <input>
            plurality_zoo = [animal+'s' for animal in zoo]
            plurality_zoo
            </input>
                <output>['baboons', 'beetles', 'elephants', 'ostrichs', 'snakes']</output>
            </sage>

      <p>
        Almost like it says: we add an <q>s</q> to each animal name,
        for each animal in the zoo, and place them in a new list.
        Perfect.
        (Except for getting the plural of <q>ostrich</q> wrong.)
      </p>
    </subsection>

    <subsection>
      <title>Lists of Integers</title>
      <p>
        One final type of list, with numbers this time.
        The <c>srange()</c> function will create lists of integers.
        (The <q>s</q> in the name stands for <q>Sage</q>
        and so will produce integers that Sage understands best.
        Many early difficulties with Sage and group theory can be alleviated by using only this command to create lists of integers.)
        In its simplest form an invocation like <c>srange(12)</c> will create a list of 12 integers,
        <em>starting at zero</em> and working up to,
        <em>but not including</em>, 12.
        Does this sound familiar?
      </p>

            <sage>
                <input>dozen = srange(12); dozen</input>
                <output>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]</output>
            </sage>

      <p>
        Here are two other forms,
        that you should be able to understand by studying the examples.
      </p>

            <sage>
                <input>teens = srange(13, 20); teens</input>
                <output>[13, 14, 15, 16, 17, 18, 19]</output>
            </sage>
            <sage>
                <input>decades = srange(1900, 2000, 10); decades</input>
                <output>[1900, 1910, 1920, 1930, 1940, 1950, 1960, 1970, 1980, 1990]</output>
            </sage>
    </subsection>

    <subsection>
      <title>Saving and Sharing Your Work</title>
      <p>
        There is a <q>Save</q> button in the upper-right corner of the Sage Notebook.
        This will save a current copy of your worksheet that you can retrieve your work from within your notebook again later,
        though you have to re-execute all the cells when you re-open the worksheet.
      </p>

      <p>
        There is also a <q>File</q> drop-down list, on the left,
        just above your very top compute cell
        (not be confused with your browser's File menu item!).
        You will see a choice here labeled
        <q>Save worksheet to a file...</q> When you do this,
        you are creating a copy of your worksheet in the <c>sws</c> format
        (short for <q>Sage WorkSheet</q>).
        You can email this file, or post it on a website,
        for other Sage users and they can use the <q>Upload</q>
        link on the homepage of their notebook to incorporate a copy of your worksheet into their notebook.
      </p>

      <p>
        There are other ways to share worksheets that you can experiment with,
        but this gives you one way to share any worksheet with anybody almost anywhere.
      </p>

      <p>
        We have covered a lot here in this section,
        so come back later to pick up tidbits you might have missed.
        There are also many more features in the Sage Notebook that we have not covered.
      </p>
    </subsection>

  </section>

  <exercises xml:id="sets-sage-exercises" component="sage-exercises">
    <title>Sage Exercises</title>
    <exercise number="1" xml:id="sets-sage-exercise-cocalc">
      <statement>
        <p>
          This exercise is just about making sure you know how to use Sage.
          You may be using the Sage Notebook server the online CoCalc service through your web browser.
          In either event, create a new worksheet.
          Do some non-trivial computation,
          maybe a pretty plot or some gruesome numerical computation to an insane precision.
          Create an interesting list and experiment with it some.
          Maybe include some nicely formatted text or <tex/> using the included mini-word-processor of the Sage Notebook
          (hover until a blue bar appears between cells and then shift-click)
          or create commentary in cells within CoCalc using the <term>magics</term>
          <c>%html</c> or <c>%md</c> on a line of their own followed by text in <init>HTML</init> or Markdown syntax
          (respectively).
        </p>

        <p>
          Use whatever mechanism your instructor has in place for submitting your work.
          Or save your worksheet and then trade with a classmate.
        </p>
      </statement>
    </exercise>

  </exercises>
</chapter>
