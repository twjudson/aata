<?xml version="1.0"?>
<!-- This file is part of the book                 -->
<!--                                               -->
<!--   Abstract Algebra: Theory and Applications   -->
<!--                                               -->
<!-- Copyright (C) 2010-2014  Robert A. Beezer     -->
<!-- See the file COPYING for copying conditions.  -->
<!--                                               -->
<!-- This file is automatically generated from the -->
<!-- private solution manual.  Minor contributed   -->
<!-- edits can be made against this file for       -->
<!-- the purpose of a pull request.                -->
<exercises xml:id="actions-sage-exercises">
	<title>Sage Exercises</title>

	<exercise number="1">
		<statement>
			<p>Construct the Higman-Sims graph with the command <c>graphs.HigmanSimsGraph()</c>.  Then construct the automorphism group and determine the order of the one interesting normal subgroup of this group.  You can try plotting the graph, but the graphic is unlikely to be very informative.</p>
		</statement>

	</exercise>

	<exercise number="2">
		<statement>
			<p>This exercise asks you to verify the class equation outside of the usual situation where the group action is conjugation.  Consider the example of the automorphism group of the path on <m>11</m> vertices.  First construct the list of orbits.  From each orbit, grab the first element of the orbit as a representative.  Compute the size of the orbit as the index of the stabilizer of the representative in the group via Theorem<nbsp/><xref ref="theorem-orbit"/>.  (Yes, you could just compute the size of the full orbit, but the idea of the exercise is to use more group-theoretic results.)  Then sum these orbit-sizes, which should equal the size of the whole vertex set since the orbits form a partition.</p>
		</statement>

	</exercise>

	<exercise number="3">
		<statement>
			<p>Construct a simple graph (no loops or multiple edges), with at least two vertices and at least one edge, whose automorphism group is trivial.  You might start experimenting by drawing pictures on paper before constructing the graph.  A command like the following will let you construct a graph from edges.  The graph below looks like a triangle or <m>3</m>-cycle.</p>

			<sage doctest="not tested">
				<input>
				G = Graph([(1,2), (2,3), (3,1)])
				G.plot()
				</input>
			</sage>
		</statement>


	</exercise>

	<exercise number="4">
		<statement>
			<p>For the following two pairs of groups, compute the list of conjugacy class representatives for each group in the pair.  For each part, compare and contrast the results for the two groups in the pair, with thoughtful and insightful comments.</p>

			<ol>
				<li><p>The full symmetric group on 5 symbols, <m>S_5</m>, and the alternating group on 5 symbols, <m>A_5</m>.</p></li>

				<li><p>The dihedral groups that are symmetries of a <m>7</m>-gon and an <m>8</m>-gon, <m>D_{7}</m> and <m>D_{8}</m>.</p></li>
			</ol>
		</statement>

	</exercise>

	<exercise number="5">
		<statement>

			<p>Use the command <c>graphs.CubeGraph(4)</c> to build the four-dimensional cube graph, <m>Q_4</m>.  Using a plain <c>.plot()</c> command (without a spring layout) should create a nice plot.  Construct the automorphism group of the graph, which will provide a group action on the vertex set.</p>

			<ol>
				<li><p>Construct the orbits of this action, and comment.</p></li>
				<li><p>Construct a stabilizer of a single vertex (which is a subgroup of the full automorphism group) and then consider the action of <em>this</em> group on the vertex set.  Construct the orbits of this new action, and comment carefully and fully on your observations, especially in terms of the vertices of the graph.</p></li>
			</ol>
		</statement>

	</exercise>

	<exercise number="6">
		<statement>
			<p>Build the graph given by the commands below.  The result should be a symmetric-looking graph with an automorphism group of order <m>16</m>.</p>

			<!-- Graph is number 3.8 in Cvetkovic, Doob, Sachs -->
			<!-- CycleGraph provides a good layout             -->
			<sage doctest="not tested">
			<input>
			G = graphs.CycleGraph(8)
			G.add_edges([(0,2),(1,3),(4,6),(5,7)])
			G.plot()
			</input>
			</sage>

			<p>Repeat the two parts of the previous exercise, but realize that in the second part there are now two different stabilizers to create, so build both and compare the differences in the stabilizers and their orbits.  Creating a second plot with <c>G.plot(layout='planar')</c> might provide extra insight.</p>
		</statement>

	</exercise>
</exercises>
